<?php 
// $Id$ 

/**
 * @file
 * This module allows site visitors to connect and register with facebook account
 */

define('FBCONNECT_RENEW_CACHE', 12);
define('FBCONNECT_USER_CACHE_EXPIRE', 24);
define('FBCONNECT_USERBLOCK_CACHE_EXPIRE', 1);
define('FBCONNECT_REG_FEED_BUNDLEID', 47875658217);
define('FBCONNECT_COMMENT_FEED_BUNDLEID', 47874003217);
define('FBCONNECT_USE_FBAVATAR', 1);

/**
 * Implementation of hook_menu().
 */
function fbconnect_menu() {
  $items['admin/settings/fbconnect'] = array(
    'title' => 'Fbconnect', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('fbconnect_admin_settings'), 
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fbconnect.admin.inc',
    'description' => 'Configure how Facebook Connect behave.',
  );
  $items['fbconnect/register/import'] = array(
    'page callback' => 'fbconnect_register_page',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'fbconnect.pages.inc',
  );
  $items['fbconnect/register/create'] = array(
    'page callback' => 'fbconnect_register_page',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'fbconnect.pages.inc',
  );
  $items['fbconnect/invite/friends'] = array(
    'page callback' => 'fbconnect_render_friends_invite_form',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/fbconnect'] = array(
    'title' => 'Facebook connect',
    'page callback' => 'fbconnect_user_identities',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'fbconnect.pages.inc',
    );
  $items['fbconnect/logout'] = array(
    'page callback' => 'fbconnect_logout_page',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items; 
}

/**
 * Recupere l'avatar Facebook de l'utilisateur.
 * @param Int $fbuid
 */
function fbconnect_get_fb_avatar($fbuid) {
  $size = 'pic_with_logo';
  // Get facebook user picture's url.
  $pic_url = fbconnect_get_info_from_fb($fbuid, $size);
  $result = drupal_http_request($pic_url[$size]);
  if ($result->code != 200) {
    watchdog('fbconnect', 'Failed importing facebook user avatar for @fbuid, code : @code', 
    array('@fbuid' => $fbuid, '@code' => $result->code));
    return;
  }
  if ($result->headers['Content-Type'] != 'image/jpeg') {
    watchdog('fbconnect', 'Failed importing facebook user avatar, invalid content-type.');
    return;
  }  
  $filename = 'picture-fb_'. $fbuid .'.jpg';
  $dest = file_directory_path();
  if (variable_get('user_picture_path', '')) {
    $dest .= '/'. variable_get('user_picture_path', '');
  }
  $dest .= '/'. $filename;
  return file_save_data($result->data, $dest, FILE_EXISTS_REPLACE);
}

/**
 * Recupere les parametres d'importation de l'utilisateur
 */
function fbconnect_get_user_import_setting($user) {
  $data = db_result(db_query('SELECT import_setting FROM {fbconnect_users} WHERE uid = %d', $user->uid));
  if ($data != NULL) {
     return unserialize($data);
  }
}
/**
 * Enregistre les informations du profile facebook.
 * Une session Facebook doit etre active.
 *
 * @param Object $user
 *   Drupal user object
 * @param Array $field_to_import
 */
function fbconnect_insert_user_info($user, $field_to_import = NULL) {
  if ($field_to_import == NULL) {
    $field_to_import = fbconnect_get_user_import_setting($user);
  }
  elseif ($field_to_import) {
    db_query("UPDATE {fbconnect_users} SET import_setting = '%s' WHERE uid = %d", serialize($field_to_import), $user->uid);
  }  
  if (!$field_to_import) {
    return;
  }  
  $fbuid = fbconnect_get_fbuid();  
  $fb_user_profile = fbconnect_get_info_from_fb($fbuid, implode(',', $field_to_import));
  if (count($field_to_import) != count($fb_user_profile)) {
    watchdog('fbconnect', 'Error importing from facebook for fbuid : %fbuid', array('%fbuid' => $fbuid));
    drupal_set_message(t('Error importing from facebook'), 'error');
    return;               
  }
  // Drupal uid
  $fields[] = 'uid';
  $values[] = $user->uid;
  $s[] = "%d";
  
  foreach ($fb_user_profile as $key => $value) {
    $fields[] = $key;
    $values[] = (is_array($value)) ? serialize($value) : $value;
    $s[] = "'%s'";
  }
  // Save user information imported from Facebook 
  db_query('REPLACE INTO {fbconnect_profile} ('. implode(', ', $fields) .') VALUES ('. implode(', ', $s) .')', $values);
  // Update the 24h cache timer and save fields settings.
  db_query("UPDATE {fbconnect_users} SET timestamp = %d, import_setting = '%s' WHERE uid = %d", time(), serialize($field_to_import), $user->uid);
}

/**
 * Menu callback.
 * Called when user loggout from drupal
 */
function fbconnect_logout_page() {
   // We load an empty page, the facebook JS API will render the logout message
   return '&nbsp;';
}

/**
 * Retour la configuration, avatar de l'utilisateur.
 * Si on passe une valeur en parametre,
 * la fonction stock la nouvelle valeur.
 */
function fbconnect_user_avatar_setting($user, $value = NULL) {
  if (is_numeric($value)) {
    return db_query('UPDATE {fbconnect_users} SET avatar = %d WHERE uid = %d', $value, $user->uid);
  }
 return db_result(db_query('SELECT avatar FROM {fbconnect_users} WHERE uid = %d', $user->uid));
}

/**
 * Implementation of hook_block().
 */
function fbconnect_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Fbconnect friend list');
      $blocks[0]['cache'] = BLOCK_NO_CACHE;
    return $blocks;

    case 'view':
      global $user;
      if (user_is_logged_in() && fbconnect_get_fbuid()) {
        $blocks['content'] = fbconnect_block_render($user);
      }
    return $blocks;
  }
}

/**
 * Render data for fbconnect block
 */
function fbconnect_block_render($user) {
  $fbuid = fbconnect_get_fbuid();
  // Check for a cached version of this block. 
  $cid = 'fbconnect:block:fbuid:'. $fbuid;
  if ($cached = cache_get($cid, 'cache_block')) {
    $output = $cached->data;
  }
  else {
    $content = fbconnect_get_connected_friends($fbuid);
    $data['friend_list'] = $content;
    $data['friend_link'] = l(t('Invite your Facebook friends'), 'fbconnect/invite/friends');
    $output = theme('block_fbconnect',$data, $user);
    cache_set($cid, $output, 'cache_block' , time() + (FBCONNECT_USERBLOCK_CACHE_EXPIRE * 3600)); 
  }
  return $output;
}

/**
 * This form is submitted by javascript when facebook session is detected.
 */
function fbconnect_autoconnect_form() {
  $form['ajax_fbuid'] = array(
    '#type' => 'hidden',
  );
  return $form;
}

/**
 * Implementation of hook_footer().
 */
function fbconnect_footer() {
  // Display the autoconnect form.
  if (!fbconnect_get_fbuid()) {
    return drupal_get_form('fbconnect_autoconnect_form');
  }
}

/**
 * Implementation of hook_init().
 */
function fbconnect_init() {
  drupal_add_css(drupal_get_path('module', 'fbconnect') .'/fbconnect.css');  
  // Renders the JS necessary for any Facebook interaction to work.
  _fbconnect_render_js();
  
  if (user_is_logged_in()) {
    return;
  }
  $fbuid = fbconnect_get_fbuid();
  
  if (!$fbuid || (arg(0) == 'fbconnect' && arg(1) == 'logout')) {
    return;
  }
  // During registration the cache is disabled
  if (arg(0) == 'fbconnect' && arg(1) == 'register') {
    $GLOBALS['conf']['cache'] = FALSE;
    return;
  }
  // Verify that the user is associated with a uid in the database  
  $uid = _is_fbconnect_user($fbuid);
  if (!$uid) {
    $fields = array_filter(variable_get('fbconnect_field_to_import', ''), 'fbconnect_import_filter');
    $path = (variable_get('fbconnect_import', array('fbconnect_import')) && $fields) ? 'fbconnect/register/import' : 'fbconnect/register/create';
    drupal_goto($path);
  }
  elseif ($uid) {
    global $user;  
    $user = user_load($uid);
    db_query('UPDATE {users} SET login = %d WHERE uid = %d', time(), $user->uid);
    // Cache timer 12 hours
    if (variable_get('fbconnect_import', array('fbconnect_import')) && ($user->fb_updatetime < time() - FBCONNECT_RENEW_CACHE * 3600)) {
      fbconnect_insert_user_info($user);
    }
  }
}

/**
 * Impletementation of hook_form_alter.
 */
function fbconnect_form_alter(&$form, $form_state, $form_id) {
  if (($form_id == 'user_login_block' || $form_id == 'user_login') && fbconnect_get_config()) {
    $items[] = array(
      'data' => fbconnect_render_button(),
    );
    $form['fbconnect_button'] = array(
      '#value' => theme('item_list', $items),
      '#weight' => 1,
    );
  }
  
  if (!fbconnect_get_fbuid()) {
    return;
  }

  if ($form_id == 'comment_form' && variable_get('fbconnect_com_feed', '')) {
    $form['fbconnect_feed'] = array(
      '#type' => 'checkbox',
      '#title' => fbconnect_render_fb_favicon().t('Publish Facebook story feed'),
      '#default_value' => 1,
      '#weight' => 0,
    );
    $form['#submit'][] = 'fbconnect_comment_feed_submit';
  }
}

/**
 * Stock informations used by the facebook feed javascript function.
 */
function fbconnect_comment_feed_submit($form, &$form_state) {
  if ($form_state['values']['fbconnect_feed'] == 1) {
   $node = node_load(array('nid' => $form_state['values']['nid']));
   
   $_SESSION['fbconnect_feed'] = array(
      'type' => 'comment',
      'comment' => drupal_to_js($form_state['values']['comment']),
      'title' => drupal_to_js($node->title),
      'nodeurl' => drupal_to_js(url('node/'.$node->nid, array('absolute' => TRUE))),
   );
  }
}

function fbconnect_refresh_user_avatar($fbuid, $uid) {
  db_query("UPDATE {users} SET picture = '%s' WHERE uid = %d", fbconnect_get_fb_avatar($fbuid), $uid);
}

/**
 * Impletementation of hook_cron
 */
function fbconnect_cron() {
  fbconnect_clear_cache();
  cache_clear_all();
}

/**
 * Delete user facebook information from cache table.
 */
function fbconnect_clear_cache() {
  $expire = time() - FBCONNECT_USER_CACHE_EXPIRE * 3600;    
  // Update user picture
  if (variable_get('user_pictures', 0)) {
    $result = db_query('SELECT uid, fbuid FROM {fbconnect_users} WHERE timestamp < %d AND avatar = %d', $expire, FBCONNECT_USE_FBAVATAR);
    while ($tab = db_fetch_array($result)) {
      if ($tab) {
        fbconnect_refresh_user_avatar($tab['fbuid'], $tab['uid']);
        db_query('UPDATE {fbconnect_users} SET timestamp = %d', time());
      }
    }
  }
  
  $query = 'DELETE {fbconnect_profile} FROM {fbconnect_profile} INNER JOIN {fbconnect_users}
    WHERE {fbconnect_users}.uid = {fbconnect_profile}.uid AND timestamp < %d';
  db_query($query, $expire);
}

/**
 * Implementation of hook_user().
 */
function fbconnect_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      $data = db_fetch_array(db_query('SELECT fbuid, timestamp, visibility FROM {fbconnect_users} WHERE uid = %d', $account->uid));
      $account->fbuid = $data['fbuid'];
      $account->fb_updatetime = $data['timestamp'];
      $account->fb_visibility = $data['visibility'];
    break;    
    case 'delete':
      if ($account->fbuid) {
        db_query('DELETE FROM {fbconnect_users} WHERE uid = %d', $account->uid);
        db_query('DELETE FROM {fbconnect_profile} WHERE uid = %d', $account->uid);        
      }
    break;    
    case 'view':
      $account->content['fbconnect']['profile'] = array(
        '#type' => 'user_profile_item',
        '#value' => theme('fb_user_profile', fbconnect_get_user_profile($account->uid), $account),
        '#weight' => 0,
      );
    break;
    case 'logout':
      // Redirect to session destroy page.
      if (fbconnect_get_fbuid()) {
        drupal_goto('fbconnect/logout');
      }
    break;
  }
}

/**
 * Validate user information available from facebook
 *
 * @return array
 */
function fbconnect_available_import_fields($fbuid) {
  if ($result = fbconnect_get_info_from_fb($fbuid)) {
    $import_options = variable_get('facebook_user_fields', '');
    foreach ($result as $key => $value) {      
      if ($value) {
        if (is_array($value)) {
          $available_import[$key] .= $import_options[$key];
          continue;          
        }
        $available_import[$key] .= $import_options[$key] .' : '. check_plain($value);
      }
    }
    return $available_import;
  }
}

/**
 * Query information from facebook user table.
 *
 * @return array
 */
function fbconnect_get_info_from_fb($fbuid, $fields = NULL) {
  if (!$fields) {
    $fields = implode(', ', array_filter((array)variable_get('fbconnect_field_to_import', ''), 'fbconnect_import_filter'));
  }  
  if (facebook_client() && $fields) {
    try {
      $result = facebook_client()->api_client->fql_query("SELECT $fields FROM user WHERE uid = $fbuid");
      return $result[0];
    } catch (Exception $e) {
      watchdog('fbconnect', 'Exception thrown while using FQL: %code',
        array('%code' => $e->getMessage()), WATCHDOG_WARNING);
    }
  }
}

function fbconnect_import_filter($var) {
  return ($var) ? $var : NULL;
}

/**
 * Get the facebook username
 * @param integer $fbuid
 *   Facebook user id
 */
function fbconnect_get_fbname($fbuid) {
  if (facebook_client()) {
    try {
      $result = facebook_client()->api_client->users_getStandardInfo($fbuid, array('name'));
      return check_plain($result[0]['name']);
    } catch (Exception $e) {
      watchdog('fbconnect', 'Exception thrown while calling users_getStandardInfo: %code',
        array('%code' => $e->getMessage()), WATCHDOG_WARNING);
    }
  }
}

/**
 * Query fbconnect user information.
 *
 * @return array
 */
function fbconnect_get_user_profile($uid) {
  $result = db_fetch_array(db_query('SELECT * FROM {fbconnect_profile} WHERE uid = %d', $uid));              
  if ($result) {
    $serialized = array('affiliations', 'hometown_location', 'current_location', 'meeting_sex', 'meeting_for');    
    $data = array();
    foreach ($result as $key => $value) {
      if ($key == 'uid') {
        continue;
      }
      else if (in_array($key, $serialized) && $value) {
        $data[$key] = unserialize($value);
      }
      else if ($value) {
        $data[$key] = $value; 
      }
    }
    return $data;
  }
}

/**
 * Check facebook session.
 *
 * @return integer
 *   facebook user id
 */
function fbconnect_get_fbuid() {
    if (facebook_client()) {
      return facebook_client()->get_loggedin_user();
    }
}

/**
 * Check if user already registered in the fbconnect_users table
 *
 * @param integer $fbuid
 *   Facebook user id
 * @return array
 */
function _is_fbconnect_user($fbuid) {
  $data = db_fetch_array(db_query('SELECT uid FROM {fbconnect_users} WHERE fbuid = %d', $fbuid));
  return ($data) ? $data : FALSE;
}

/**
 * Store user into table fbconnect
 *
 * @param integer $uid
 *   Drupal user id
 * @param integer $fbuid
 *   Facebook user id
 */
function fbconnect_register($uid, $fbuid) {
  return db_query("INSERT INTO {fbconnect_users} (uid, fbuid, timestamp) VALUES (%d, %d, %d) ON DUPLICATE KEY UPDATE uid = %d", $uid, $fbuid, time(), $uid);
}

/**
 * Render a facebook user picture
 *
 * @param string $size 
 *   Size of the pic. one of ('thumb', 'medium', 'large')
 */
function fbconnect_render_avatar($fbuid, $size='medium') {
  return '<fb:profile-pic  facebook-logo="true" size="'. $size .'" uid="'. $fbuid .'"></fb:profile-pic>';
}

/**
 * Render a custom button to log in via Facebook.
 */
function fbconnect_render_button() {
  list($size, $length) = explode('_', variable_get('fbconnect_button_type', array('medium-short')));
  return '<fb:login-button onlogin="facebook_onlogin_ready();" size="'. $size .'" background="white" length="'.$length.'">
          </fb:login-button>';
}

/**
 * Get fbconnect config parameter
 *
 * @return array
 */
function fbconnect_get_config() {
  $config = array();
  
  $config['api_key'] = variable_get('fbconnect_api_key', NULL);
  $config['secret_api_key'] = variable_get('fbconnect_secret_api_key', NULL);
  
  if ($config['api_key'] && $config['secret_api_key']) {
    return $config;
  }
}

/**
 * Get the facebook client object for easy access.
 * @return object
 *   Facebook Api object
 */
function facebook_client() {
  static $fb = NULL;
  if (!$fb instanceof Facebook) {
    if ($conf = fbconnect_get_config()) {
      // Facebook php client API
      $lib_path = drupal_get_path('module', 'fbconnect') .'/facebook-client/';
      $lib_files = array(
        'facebook.php',
        'facebook_desktop.php',
        'jsonwrapper/jsonwrapper_inner.php',    
        'jsonwrapper/jsonwrapper.php',
        'jsonwrapper/JSON/JSON.php'
      );
      
      foreach ($lib_files as $file_path) {
        if (!file_exists($lib_path.$file_path)) {
          drupal_set_message(t('Fbconnect : Facebook PHP library file @file not found see readme.txt', 
            array('@file' => $file_path)), 'status', FALSE);
          return;
        }
      }
      // Include facebook.php
      include_once($lib_path.$lib_files[0]);
      if (class_exists('Facebook')) {
        $fb = new Facebook($conf['api_key'], $conf['secret_api_key']);
      }
    }
  }
  return $fb;
}

/**
 * Get facebook friend who has_added_app.
 */
function fbconnect_get_connected_friends($fbuid) {
  if (facebook_client()) {
    $query = 'SELECT uid, has_added_app FROM user WHERE uid IN '.
      '(SELECT uid2 FROM friend WHERE uid1 = '. $fbuid .')';
    try {
    $rows = facebook_client()->api_client->fql_query($query);
    } catch (Exception $e) {
      watchdog('fbconnect', 'Exception thrown while using FQL: %code',
        array('%code' => $e->getMessage()), WATCHDOG_WARNING);
    }
    
    if (empty($rows)) {
      return;
    }
    
    $friends = array();
    foreach ($rows as $row) {
      if ($row['has_added_app'] == 0) {
        continue;
      }
      if ($uid = _is_fbconnect_user($row['uid'])) {
        $user = user_load($uid);
        if ($user->fb_visibility) {
          $friends[] = $user;
        }
      }
    }    
   return $friends;
  }
}

function fbconnect_set_user_visibility($user, $visibility) {
  db_query('UPDATE {fbconnect_users} SET visibility = %d WHERE uid = %d', $visibility, $user->uid);
}

/**
 * Render the invite friends iframe.
 */
function fbconnect_render_friends_invite_form() {
  global $base_url;
  $url       = check_url($base_url);
  $sitename  = check_plain(variable_get('site_name', t('this website')));
  
  $actiontxt = t('Please select the Facebook friends you want to tell about @sitename.', array('@sitename' => $sitename));
  $action    = check_plain(variable_get('fbconnect_invitef_redirect', $url));
  $type      = check_plain(variable_get('fbconnect_invitef_type', $sitename));
  $text      = check_plain(variable_get('fbconnect_invitef_content', t('Enjoy the new drupal facebook connect module')));
  $content   = $text .'  <fb:req-choice url=\''. $url .'\' label=\'Become a Member!\' />';
  
  $output    = '<fb:serverfbml style="width: 100%;">
                <script type="text/fbml">
                  <fb:fbml>
                    <fb:request-form
                      action="'. $action .'"
                      method="POST"
                      invite="true"
                      type="'. $type .'"
                      content="'. $content .'">	
                      <fb:multi-friend-selector
                      showborder="false"
                      actiontext="'. $actiontxt .'">
                    </fb:request-form>
                  </fb:fbml>
                </script>
              </fb:serverfbml>';
  return $output;
}

/**
 * Impletementation of hook_theme
 */
function fbconnect_theme() {
  return array(
    'fb_user_profile' => array(
      'arguments' => array('data' => NULL, 'account' => NULL)
    ),
    'block_fbconnect' => array(
      'arguments' => array('data' => NULL, 'account' => NULL)
    ),
    'render_friends_list_fbconnect' => array(
      'arguments' => array('data' => NULL)
    ),
  );
}

function theme_render_friends_list_fbconnect($data) {
  if (!empty($data)) {
     foreach ($data as $account) {
        if ($account->picture && file_exists($account->picture)) {
          $picture = theme_image($account->picture);
        }
        $rows[] = array(($picture) ? $picture : ' ' , theme('username', $account)); 
      }
      $output = theme('table', NULL, $rows);
    return $output;
  }
}

/**
 * Return fbconnect blocks content
 * @param Array $data
 */
function theme_block_fbconnect($data, $account) {
  if (!empty($data)) {
    $output = '<div class="title">'. t('Welcome @username.', array('@username' => $account->name)) .'</div>';
    $output .= $data['friend_link'];
    
    if (!empty($data['friend_list'])) {
      $output .= '<div>'. t('My friends') .'</div>';
      $output .= theme('render_friends_list_fbconnect', $data['friend_list']);
    }
    return $output;
  }
}

/**
 * Render facebook favicon
 */
function fbconnect_render_fb_favicon() {
  return theme_image(drupal_get_path('module', 'fbconnect') .'/images/favicon.gif');
}

/**
 * Return themed user profile
 *
 * @param array $data
 *   An array containing the data to display
 * @param object $account
 *   Drupal user object
 * @return formated HTML
 */
function theme_fb_user_profile($data, $account) {
if (!empty($data) && !empty($account)) {
    $label = variable_get('facebook_user_fields', '');
    foreach ($data as $key => $value) {
      if (is_array($value)) {
        switch ($key) {
          case 'affiliations':
            $output .= '<dt>'. $label[$key] .': </dt><dd>'. $value[0]['name'] .'</dd>';
          break;                  
          case 'hometown_location':
            $output .= '<dt>'. $label[$key] .': </dt><dd>'. $value['city'] .', '. $value['state'] .', '. $value['country'] .'</dd>';
          break;
        }
      }
      else {
        $output .= '<dt>'. $label[$key] .': </dt><dd>'. $value .'</dd>';
      }
    }
    return '<dl class="facebook_info">'. $output .'</dl><div class="clear"></div>';
  }
}

/**
 * This function manage all javascripts used by this module.
 */
function _fbconnect_render_js() {
  global $base_url;
  $url = drupal_to_js($base_url);
  drupal_add_js(drupal_get_path('module', 'fbconnect') .'/js/FeatureLoader.js', 'module', 'footer');
  drupal_add_js(drupal_get_path('module', 'fbconnect') .'/js/fbconnect.js', 'module', 'footer');

  if (!$conf = fbconnect_get_config()) {
    return;
  }
  
  $xd_path = drupal_to_js(base_path() . drupal_get_path('module', 'fbconnect') .'/xd_receiver.html');
  $onload_js = 'FB_RequireFeatures(["XFBML"], function() {
                  FB.Facebook.init("'. $conf['api_key'] .'", '. $xd_path .');
                });';
  
  if (!user_is_logged_in()) {
    $onload_js .= 'facebook_onlogin_ready();';
  }  
  if (arg(0) == 'fbconnect' && arg(1) == 'logout') {
    $onload_js .= 'FB.Connect.logout(function() { 
                    window.location = '. $url .'; 
                  });';
  }
  
  if ($_SESSION['fbconnect_feed']) {
      $sitename = drupal_to_js(variable_get('fbconnect_invitef_type', variable_get('site_name', '')));
      
    if ($_SESSION['fbconnect_feed']['type'] == 'registration' && arg(0) != 'fbconnect') {
      $bundle_id = variable_get('fbconnect_reg_feed_id', FBCONNECT_REG_FEED_BUNDLEID);
      $onload_js .= 'facebook_publish_feed_story('. $bundle_id .', {
                      "sitename": '. $sitename .', "siteurl" : '. $url .'
                    });';
      unset($_SESSION['fbconnect_feed']);
    }
    elseif ($_SESSION['fbconnect_feed']['type'] == 'comment') {
      $bundle_id = variable_get('fbconnect_com_feed_id', FBCONNECT_COMMENT_FEED_BUNDLEID);
      $onload_js .= 'facebook_publish_feed_story('. $bundle_id .',{
                      "sitename":'. $sitename .',
                      "siteurl" : '. $url .',
                      "title" : '. $_SESSION['fbconnect_feed']['title'] .',
                      "article_url" : '. $_SESSION['fbconnect_feed']['nodeurl'] .',
                      "comment" : '. $_SESSION['fbconnect_feed']['comment'] .'
                     });';
      unset($_SESSION['fbconnect_feed']);
    }
  }
  drupal_add_js('$(document).ready(function() {'. $onload_js .'});', 'inline', 'footer');
}